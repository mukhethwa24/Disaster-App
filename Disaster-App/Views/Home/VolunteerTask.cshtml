@model Disaster_App.Models.VolunteerTask

@{
    ViewData["Title"] = "Create Volunteer Task";
}




<div class="task-container">
    <div class="task-form">
        <h1 class="task-title">Create Volunteer Task</h1>
        <p class="task-subtitle">Assign tasks to volunteers for disaster relief efforts</p>

        <form asp-action="VolunteerTask" class="form">
            @Html.AntiForgeryToken()

            <!-- Debugging: Show Model State Errors -->
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    <h4>Please fix the following errors:</h4>
                    <ul>
                        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    </ul>
                </div>
            }

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-section">
                <h3 class="section-title">Task Details</h3>

                <div class="form-row">
                    <div class="form-group full-width">
                        <label asp-for="TaskName" class="form-label">Task Name *</label>
                        <input asp-for="TaskName" class="form-input" placeholder="Enter task title (e.g., Food Distribution, Shelter Setup, Medical Assistance)" />
                        <span asp-validation-for="TaskName" class="text-danger"></span>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group full-width">
                        <label asp-for="Description" class="form-label">Task Description</label>
                        <textarea asp-for="Description" class="form-textarea" placeholder="Provide detailed description of the task, requirements, location, and any special instructions..." rows="4"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="form-section">
                <h3 class="section-title">Assignment & Status</h3>

                <div class="form-row">
                    <div class="form-group">
                        <label asp-for="Status" class="form-label">Task Status *</label>
                        <select asp-for="Status" class="form-input" required>
                            <option value="Open">Open - Needs Volunteer</option>
                            <option value="Assigned">Assigned - In Progress</option>
                            <option value="Completed">Completed</option>
                        </select>
                        <span asp-validation-for="Status" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="AssignedTo" class="form-label">Assign to Volunteer</label>
                        <select asp-for="AssignedTo" class="form-input" id="volunteerSelect">
                            <option value="">-- Select a volunteer --</option>
                            <!-- This will be populated by JavaScript -->
                        </select>
                        <span asp-validation-for="AssignedTo" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <!-- Hidden fields that will be set automatically -->
            <input type="hidden" asp-for="CreatedAt" value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />

            <div class="form-note">
                <p>💡 <strong>Note:</strong> Tasks marked as 'Open' will be available for volunteers to pick up. 'Assigned' tasks are currently being worked on.</p>
            </div>

            <div class="form-actions">
                <button type="submit" class="submit-button">Create Task</button>
                <a href="@Url.Action("VolunteerHome", "Home")" class="cancel-button">Cancel</a>
            </div>
        </form>
    </div>
</div>

<!-- Lottie initialization -->
<script>
   

    // Load volunteers for assignment dropdown
    document.addEventListener('DOMContentLoaded', function() {
        loadVolunteers();

        const form = document.querySelector('form');
        const taskNameInput = document.getElementById('TaskName');
        const statusSelect = document.getElementById('Status');

        form.addEventListener('submit', function(e) {
            let isValid = true;

            // Validate Task Name
            if (!taskNameInput.value.trim()) {
                isValid = false;
                taskNameInput.style.borderColor = '#ff6b6b';
                taskNameInput.style.backgroundColor = 'rgba(255, 107, 107, 0.1)';
                showError(taskNameInput, 'Please enter a task name');
            } else {
                taskNameInput.style.borderColor = 'rgba(93, 173, 226, 0.3)';
                taskNameInput.style.backgroundColor = 'rgba(255, 255, 255, 0.1)';
                hideError(taskNameInput);
            }

            // Validate Status
            if (!statusSelect.value) {
                isValid = false;
                statusSelect.style.borderColor = '#ff6b6b';
                statusSelect.style.backgroundColor = 'rgba(255, 107, 107, 0.1)';
                showError(statusSelect, 'Please select a task status');
            } else {
                statusSelect.style.borderColor = 'rgba(93, 173, 226, 0.3)';
                statusSelect.style.backgroundColor = 'rgba(255, 255, 255, 0.1)';
                hideError(statusSelect);
            }

            if (!isValid) {
                e.preventDefault();
                document.querySelector('.alert-danger')?.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center'
                });
            }
        });

        // Real-time validation
        taskNameInput.addEventListener('input', function() {
            if (this.value.trim()) {
                this.style.borderColor = 'rgba(93, 173, 226, 0.3)';
                this.style.backgroundColor = 'rgba(255, 255, 255, 0.1)';
                hideError(this);
            }
        });

        statusSelect.addEventListener('change', function() {
            if (this.value) {
                this.style.borderColor = 'rgba(93, 173, 226, 0.3)';
                this.style.backgroundColor = 'rgba(255, 255, 255, 0.1)';
                hideError(this);
            }
        });
    });

    async function loadVolunteers() {
        try {
            const response = await fetch('/Home/GetVolunteers');
            const volunteers = await response.json();

            const volunteerSelect = document.getElementById('volunteerSelect');

            volunteers.forEach(volunteer => {
                const option = document.createElement('option');
                option.value = volunteer.volunteerID;
                option.textContent = `${volunteer.fullName} - ${volunteer.skills || 'No skills specified'}`;
                volunteerSelect.appendChild(option);
            });
        } catch (error) {
            console.error('Error loading volunteers:', error);
        }
    }

    function showError(element, message) {
        hideError(element);
        const errorElement = document.createElement('div');
        errorElement.className = 'field-error';
        errorElement.style.color = '#ff6b6b';
        errorElement.style.fontSize = '0.8rem';
        errorElement.style.marginTop = '5px';
        errorElement.textContent = message;
        element.parentNode.appendChild(errorElement);
    }

    function hideError(element) {
        const existingError = element.parentNode.querySelector('.field-error');
        if (existingError) {
            existingError.remove();
        }
    }
</script>

<style>
    html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .background-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        background-image: url('/images/protruding-squares.png');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }

    .background-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.4);
    }
    .task-container {
        position: relative;
        z-index: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        padding: 40px 20px;
    }

    .task-form {
        background: black;
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 40px;
        width: 100%;
        max-width: 800px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .task-title {
        color: yellow;;
        font-size: 2.5rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 10px;
    }

    .task-subtitle {
        color: #AED6F1;
        text-align: center;
        margin-bottom: 40px;
        font-size: 1.1rem;
    }

    .form-section {
        margin-bottom: 30px;
        padding: 25px;
        background: orange;
        border-radius: 15px;
        border: 1px solid rgba(255, 0, 0, 0.2);
        box-shadow: 0 4px 15px rgba(255, 0, 0, 0.1);
    }

    .section-title {
        color: #FF6B6B;
        font-size: 1.3rem;
        margin-bottom: 20px;
        border-bottom: 2px solid rgba(255, 107, 107, 0.3);
        padding-bottom: 10px;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .form-row {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
    }

    .form-group {
        flex: 1;
    }

        .form-group.full-width {
            flex: 1 0 100%;
        }

    .form-label {
        display: block;
        color: #FF9E9E;
        font-weight: bold;
        margin-bottom: 8px;
        font-size: 0.9rem;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
    }

    .form-input, .form-textarea {
        width: 100%;
        padding: 15px;
        border: 2px solid rgba(255, 107, 107, 0.3);
        border-radius: 12px;
        background: rgba(0, 0, 0, 0.4);
        color: white;
        font-size: 1rem;
        transition: all 0.3s ease;
        box-sizing: border-box;
        font-family: inherit;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .form-textarea {
        resize: vertical;
        min-height: 120px;
    }

        .form-input:focus, .form-textarea:focus {
            outline: none;
            border-color: #FF6B6B;
            background: rgba(0, 0, 0, 0.5);
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3), 0 0 0 3px rgba(255, 107, 107, 0.2);
            transform: translateY(-1px);
        }

        .form-input::placeholder, .form-textarea::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

    select.form-input {
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='%23FF6B6B' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 15px center;
        background-size: 12px;
        padding-right: 40px;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .form-note {
        background: linear-gradient(135deg, rgba(255, 107, 107, 0.15), rgba(0, 0, 0, 0.2));
        border: 1px solid rgba(255, 107, 107, 0.3);
        border-radius: 10px;
        padding: 15px;
        margin: 25px 0;
        color: #FF9E9E;
        font-size: 0.9rem;
        box-shadow: 0 2px 8px rgba(255, 0, 0, 0.1);
    }

        .form-note strong {
            color: #FF6B6B;
        }

    .form-actions {
        display: flex;
        gap: 15px;
        justify-content: center;
        margin-top: 30px;
    }

    /* Additional styling for buttons to match the red/black theme */
    .submit-button {
        background: linear-gradient(135deg, #FF7B00, #000000);
        color: white;
        border: none;
        padding: 15px 30px;
        border-radius: 12px;
        font-size: 1.1rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 180px;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
    }

        .submit-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
            background: linear-gradient(135deg, #FF5252, #FF6B6B);
        }

    .cancel-button {
        background: linear-gradient(135deg, rgba(255, 107, 107, 0.2), rgba(0, 0, 0, 0.3));
        color: #FF9E9E;
        border: 2px solid rgba(255, 107, 107, 0.3);
        padding: 15px 30px;
        border-radius: 12px;
        font-size: 1.1rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        text-align: center;
        min-width: 180px;
    }

        .cancel-button:hover {
            background: linear-gradient(135deg, rgba(255, 107, 107, 0.3), rgba(0, 0, 0, 0.4));
            color: white;
            border-color: #FF6B6B;
            transform: translateY(-2px);
            text-decoration: none;
        }

    .text-danger {
        color: #ff6b6b !important;
        font-size: 0.8rem;
        margin-top: 5px;
        display: block;
    }

    .field-error {
        color: #ff6b6b !important;
        font-size: 0.8rem;
        margin-top: 5px;
        display: block;
    }

    .alert-danger {
        background: rgba(255, 107, 107, 0.1);
        border: 1px solid #ff6b6b;
        color: #ff6b6b;
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 20px;
    }

        .alert-danger h4 {
            margin: 0 0 10px 0;
            color: #ff6b6b;
        }

        .alert-danger ul {
            margin: 0;
            padding-left: 20px;
        }

    /* Responsive design */
    @@media (max-width: 768px) {
        .form-row {
            flex-direction: column;
            gap: 0;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-actions {
            flex-direction: column;
        }

        .submit-button, .cancel-button {
            min-width: 100%;
        }

        .task-form {
            padding: 30px 20px;
        }

        .task-title {
            font-size: 2rem;
        }
    }
</style>
<!-- Background Image Container -->
<div class="background-container">
    <div class="background-overlay"></div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}