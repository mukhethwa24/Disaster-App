@model IEnumerable<Disaster_App.Models.Volunteer>

@{
    ViewData["Title"] = "View Volunteers";
}

<style>
    html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .background-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        background-image: url('/images/protruding-squares.png');
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }

    .background-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.4);
    }

    .volunteers-container {
        position: relative;
        z-index: 1;
        min-height: 100vh;
        padding: 40px 20px;
        display: flex;
        justify-content: center;
    }

    .volunteers-content {
        width: 100%;
        max-width: 1400px;
    }

    .volunteers-header {
        text-align: center;
        margin-bottom: 40px;
    }

    .volunteers-title {
        color: #ffffff;
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 10px;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }

    .volunteers-subtitle {
        color: #e0e0e0;
        font-size: 1.3rem;
        margin-bottom: 30px;
    }

    .header-actions {
        display: flex;
        gap: 15px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .action-button {
        background: linear-gradient(135deg, #FF7B00, #000000);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 10px;
        font-size: 1rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

        .action-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 123, 0, 0.4);
            text-decoration: none;
            color: white;
        }

        .action-button.secondary {
            background: rgba(255, 255, 255, 0.1);
            color: #e0e0e0;
            border: 2px solid rgba(255, 255, 255, 0.2);
        }

            .action-button.secondary:hover {
                background: rgba(255, 255, 255, 0.2);
                color: white;
            }

    /* Stats Section - Moved to top */
    .stats-section {
        margin-bottom: 30px;
    }

    .table-stats {
        display: flex;
        justify-content: center;
        gap: 20px;
        padding: 20px;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        flex-wrap: wrap;
    }

    .stats-item {
        text-align: center;
        padding: 15px 20px;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 10px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        min-width: 120px;
        transition: all 0.3s ease;
    }

        .stats-item:hover {
            transform: translateY(-2px);
            background: rgba(0, 0, 0, 0.4);
            border-color: rgba(255, 255, 255, 0.3);
        }

    .stats-label {
        display: block;
        color: #e0e0e0;
        font-size: 0.8rem;
        margin-bottom: 5px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .stats-value {
        display: block;
        color: #ffffff;
        font-size: 1.5rem;
        font-weight: bold;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .volunteers-table-container {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .modern-table {
        width: 100%;
        border-collapse: collapse;
        color: white;
        font-size: 0.95rem;
    }

        .modern-table th {
            background: rgba(93, 173, 226, 0.2);
            color: #5DADE2;
            font-weight: bold;
            padding: 15px 12px;
            text-align: left;
            border-bottom: 2px solid rgba(93, 173, 226, 0.3);
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .modern-table td {
            padding: 15px 12px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
        }

        .modern-table tbody tr:hover {
            background: rgba(255, 255, 255, 0.08);
        }

        .modern-table tbody tr:last-child td {
            border-bottom: none;
        }

    .volunteer-id {
        font-weight: bold;
        color: #1AC782;
        font-family: 'Courier New', monospace;
    }

    .volunteer-name {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .volunteer-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: rgba(93, 173, 226, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        border: 2px solid rgba(93, 173, 226, 0.3);
    }

    .avatar-icon {
        font-size: 1.2rem;
    }

    .volunteer-info {
        display: flex;
        flex-direction: column;
    }

    .volunteer-phone {
        font-size: 0.8rem;
        color: rgba(255, 255, 255, 0.6);
        margin-top: 2px;
    }

    .volunteer-email {
        color: #AED6F1;
        font-size: 0.9rem;
    }

    .volunteer-skills {
        max-width: 200px;
    }

    .skills-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
    }

    .skill-tag {
        background: rgba(26, 199, 130, 0.2);
        color: #1AC782;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.75rem;
        border: 1px solid rgba(26, 199, 130, 0.3);
        white-space: nowrap;
    }

        .skill-tag.more {
            background: rgba(93, 173, 226, 0.2);
            color: #5DADE2;
            border: 1px solid rgba(93, 173, 226, 0.3);
        }

    .availability-badge {
        padding: 6px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        white-space: nowrap;
    }

    .availability-weekdays {
        background: rgba(255, 193, 7, 0.2);
        color: #FFC107;
        border: 1px solid rgba(255, 193, 7, 0.3);
    }

    .availability-weekends {
        background: rgba(156, 39, 176, 0.2);
        color: #9C27B0;
        border: 1px solid rgba(156, 39, 176, 0.3);
    }

    .availability-evenings {
        background: rgba(33, 150, 243, 0.2);
        color: #2196F3;
        border: 1px solid rgba(33, 150, 243, 0.3);
    }

    .availability-flexible {
        background: rgba(76, 175, 80, 0.2);
        color: #4CAF50;
        border: 1px solid rgba(76, 175, 80, 0.3);
    }

    .availability-emergency {
        background: rgba(244, 67, 54, 0.2);
        color: #F44336;
        border: 1px solid rgba(244, 67, 54, 0.3);
    }

    .availability-oncall {
        background: rgba(255, 152, 0, 0.2);
        color: #FF9800;
        border: 1px solid rgba(255, 152, 0, 0.3);
    }

    .volunteer-join-date {
        color: rgba(255, 255, 255, 0.8);
        font-size: 0.9rem;
    }

    .join-days {
        font-size: 0.75rem;
        color: rgba(255, 255, 255, 0.5);
        margin-top: 2px;
    }

    .volunteer-tasks {
        text-align: center;
    }

    .task-stats {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .task-count {
        color: #ffffff;
        font-size: 1.2rem;
        font-weight: bold;
    }

    .task-label {
        color: rgba(255, 255, 255, 0.6);
        font-size: 0.75rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-badge {
        padding: 6px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-active {
        background: rgba(76, 175, 80, 0.2);
        color: #4CAF50;
        border: 1px solid rgba(76, 175, 80, 0.3);
    }

    .status-available {
        background: rgba(255, 193, 7, 0.2);
        color: #FFC107;
        border: 1px solid rgba(255, 193, 7, 0.3);
    }

    .text-muted {
        color: rgba(255, 255, 255, 0.5) !important;
        font-style: italic;
    }

    .no-volunteers {
        text-align: center;
        padding: 60px 20px;
        color: #AED6F1;
    }

    .no-volunteers-icon {
        font-size: 4rem;
        margin-bottom: 20px;
        opacity: 0.7;
    }

    .no-volunteers h3 {
        color: #5DADE2;
        margin-bottom: 10px;
        font-size: 1.5rem;
    }

    .no-volunteers p {
        margin-bottom: 30px;
        font-size: 1.1rem;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .volunteers-container {
            padding: 20px 10px;
        }

        .volunteers-title {
            font-size: 2.2rem;
        }

        .volunteers-subtitle {
            font-size: 1.1rem;
        }

        .header-actions {
            flex-direction: column;
            align-items: center;
        }

        .action-button {
            width: 100%;
            max-width: 250px;
            justify-content: center;
        }

        .table-stats {
            gap: 10px;
            padding: 15px;
        }

        .stats-item {
            padding: 12px 15px;
            flex: 1;
            min-width: 100px;
        }

        .stats-value {
            font-size: 1.3rem;
        }

        .volunteers-table-container {
            padding: 20px 15px;
            overflow-x: auto;
        }

        .modern-table {
            font-size: 0.85rem;
            min-width: 1000px;
        }

            .modern-table th,
            .modern-table td {
                padding: 12px 8px;
            }
    }

    @@media (max-width: 480px) {
        .volunteers-title {
            font-size: 1.8rem;
        }

        .volunteers-subtitle {
            font-size: 1rem;
        }

        .table-stats {
            flex-direction: column;
            align-items: center;
        }

        .stats-item {
            width: 100%;
            max-width: 200px;
        }
    }
</style>

<!-- Background Image Container -->
<div class="background-container">
    <div class="background-overlay"></div>
</div>

<div class="volunteers-container">
    <div class="volunteers-content">
        <div class="volunteers-header">
            <h1 class="volunteers-title">Our Volunteers</h1>
            <p class="volunteers-subtitle">Meet the amazing people making a difference in our community</p>

            <div class="header-actions">
                <a href="@Url.Action("Volunteerss", "Home")" class="action-button">
                    <span class="button-icon">➕</span>
                    Register New Volunteer
                </a>
                <a href="@Url.Action("VolunteerHome", "Home")" class="action-button secondary">
                    <span class="button-icon">🏠</span>
                    Back to Dashboard
                </a>
            </div>
        </div>

        <!-- Stats Section - Moved below navigation/header -->
        @if (Model != null && Model.Any())
        {
            <div class="stats-section">
                <div class="table-stats">
                    <div class="stats-item">
                        <span class="stats-label">Total Volunteers:</span>
                        <span class="stats-value">@Model.Count()</span>
                    </div>
                    <div class="stats-item">
                        <span class="stats-label">Active:</span>
                        <span class="stats-value">@Model.Count(v => v.Tasks?.Any(t => t.Status == "Assigned") == true)</span>
                    </div>
                    <div class="stats-item">
                        <span class="stats-label">Available:</span>
                        <span class="stats-value">@Model.Count(v => !v.Tasks?.Any(t => t.Status == "Assigned") == true)</span>
                    </div>
                    <div class="stats-item">
                        <span class="stats-label">Weekdays:</span>
                        <span class="stats-value">@Model.Count(v => v.Availability == "Weekdays")</span>
                    </div>
                    <div class="stats-item">
                        <span class="stats-label">Weekends:</span>
                        <span class="stats-value">@Model.Count(v => v.Availability == "Weekends")</span>
                    </div>
                    <div class="stats-item">
                        <span class="stats-label">Flexible:</span>
                        <span class="stats-value">@Model.Count(v => v.Availability == "Flexible")</span>
                    </div>
                </div>
            </div>
        }

        <div class="volunteers-table-container">
            @if (Model != null && Model.Any())
            {
                <table class="modern-table">
                    <thead>
                        <tr>
                            <th>Volunteer ID</th>
                            <th>Volunteer Name</th>
                            <th>Email</th>
                            <th>Skills</th>
                            <th>Availability</th>
                            <th>Join Date</th>
                            <th>Assigned Tasks</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var volunteer in Model)
                        {
                            <tr>
                                <td class="volunteer-id">#@volunteer.VolunteerID</td>
                                <td class="volunteer-name">
                                    <div class="volunteer-avatar">
                                        <span class="avatar-icon">👤</span>
                                    </div>
                                    <div class="volunteer-info">
                                        <strong>@volunteer.User?.FullName</strong>
                                        <span class="volunteer-phone">@volunteer.User?.Phone</span>
                                    </div>
                                </td>
                                <td class="volunteer-email">
                                    @volunteer.User?.Email
                                </td>
                                <td class="volunteer-skills">
                                    @if (!string.IsNullOrEmpty(volunteer.Skills))
                                    {
                                        <div class="skills-tags">
                                            @foreach (var skill in volunteer.Skills.Split(',').Take(3))
                                            {
                                                <span class="skill-tag">@skill.Trim()</span>
                                            }
                                            @if (volunteer.Skills.Split(',').Length > 3)
                                            {
                                                <span class="skill-tag more">+@(volunteer.Skills.Split(',').Length - 3) more</span>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No skills specified</span>
                                    }
                                </td>
                                <td class="volunteer-availability">
                                    <span class="availability-badge availability-@volunteer.Availability?.ToLower().Replace(" ", "")">
                                        @volunteer.Availability
                                    </span>
                                </td>
                                <td class="volunteer-join-date">
                                    @volunteer.JoinedAt.ToString("MMM dd, yyyy")
                                    <div class="join-days">(@((DateTime.Now - volunteer.JoinedAt).Days) days ago)</div>
                                </td>
                                <td class="volunteer-tasks">
                                    <div class="task-stats">
                                        <span class="task-count">
                                            @volunteer.Tasks?.Count(t => t.Status == "Assigned" || t.Status == "Completed")
                                        </span>
                                        <span class="task-label">tasks</span>
                                    </div>
                                </td>
                                <td class="volunteer-status">
                                    @{
                                        var activeTasks = volunteer.Tasks?.Count(t => t.Status == "Assigned") ?? 0;
                                        var status = activeTasks > 0 ? "Active" : "Available";
                                        var statusClass = activeTasks > 0 ? "active" : "available";
                                    }
                                    <span class="status-badge status-@statusClass">
                                        @status
                                    </span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="no-volunteers">
                    <div class="no-volunteers-icon">👥</div>
                    <h3>No Volunteers Found</h3>
                    <p>There are no registered volunteers in the system yet.</p>
                    <a href="@Url.Action("Volunteerss", "Home")" class="action-button">
                        <span class="button-icon">➕</span>
                        Register First Volunteer
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const volunteerRows = document.querySelectorAll('.modern-table tbody tr');

        volunteerRows.forEach(row => {
            row.addEventListener('click', function() {
                const volunteerId = this.querySelector('.volunteer-id').textContent;
                const volunteerName = this.querySelector('.volunteer-name strong').textContent;

                // Show volunteer details (you can implement a modal or redirect)
                alert('View details for: ' + volunteerName + ' ' + volunteerId);
            });

            // Add hover effect
            row.addEventListener('mouseenter', function() {
                this.style.cursor = 'pointer';
                this.style.transform = 'translateX(5px)';
            });

            row.addEventListener('mouseleave', function() {
                this.style.transform = 'translateX(0)';
            });
        });
    });
</script>